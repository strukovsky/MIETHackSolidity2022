{
  "address": "0x1928F0FC7F97599ab6078199d791aF675F835032",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaShort",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "desiredReactions",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "desiredComments",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdReactions",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdComments",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tips",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCalculatedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "advertiser",
          "type": "address"
        }
      ],
      "name": "AdvertisementPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "desiredReactions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desiredComments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdReactions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdComments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tips",
          "type": "uint256"
        }
      ],
      "name": "publishAdvertisement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "advertiser",
          "type": "address"
        }
      ],
      "name": "registerAdvertiser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blogger",
          "type": "address"
        }
      ],
      "name": "registerBlogger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "advertisementId",
          "type": "uint256"
        }
      ],
      "name": "requireRewardForAdvertisement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "advertisementId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reactions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "comments",
          "type": "uint256"
        }
      ],
      "name": "sendActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "advertisementId",
          "type": "uint256"
        }
      ],
      "name": "submitAdvertisement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract MetaShort",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf37d11bea5bedc3be020cbf8fa3264f8b24e8605691abb12b5948f626157a00",
  "receipt": {
    "to": null,
    "from": "0x5fCb8f7149E8aD03544157C90E6f81b26933d3a2",
    "contractAddress": "0x1928F0FC7F97599ab6078199d791aF675F835032",
    "transactionIndex": 1,
    "gasUsed": "2303332",
    "logsBloom": "0x
    "blockHash": "0x2f89d0304d4076e5a53f88de63c81f2504219bfd5c27c6f229640d89d187d9ad",
    "transactionHash": "0xcf37d11bea5bedc3be020cbf8fa3264f8b24e8605691abb12b5948f626157a00",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19713221,
        "transactionHash": "0xcf37d11bea5bedc3be020cbf8fa3264f8b24e8605691abb12b5948f626157a00",
        "address": "0x1928F0FC7F97599ab6078199d791aF675F835032",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2",
          "0x0000000000000000000000005fcb8f7149e8ad03544157c90e6f81b26933d3a2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2f89d0304d4076e5a53f88de63c81f2504219bfd5c27c6f229640d89d187d9ad"
      }
    ],
    "blockNumber": 19713221,
    "cumulativeGasUsed": "2324332",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB46FC2b43138fa0B82F75b3C5874A3778235d217"
  ],
  "numDeployments": 1,
  "solcInputHash": "4ff3a245bf464fd13bafb25e55ff16fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaShort\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"desiredReactions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"desiredComments\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdReactions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdComments\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tips\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCalculatedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"}],\"name\":\"AdvertisementPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"desiredReactions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desiredComments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdReactions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdComments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tips\",\"type\":\"uint256\"}],\"name\":\"publishAdvertisement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"}],\"name\":\"registerAdvertiser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blogger\",\"type\":\"address\"}],\"name\":\"registerBlogger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"advertisementId\",\"type\":\"uint256\"}],\"name\":\"requireRewardForAdvertisement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"advertisementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reactions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"comments\",\"type\":\"uint256\"}],\"name\":\"sendActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"advertisementId\",\"type\":\"uint256\"}],\"name\":\"submitAdvertisement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MetaShort\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaShortGovernance.sol\":\"MetaShortGovernance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3fe04ed1daf0f12454333fde982a25b103860d8a010dd5d8479b83ebf1dfb788\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetaShort.sol\":{\"content\":\"//SPDX-License-Identifier: unlicense\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract MetaShort is ERC20, ERC20Burnable, AccessControl {\\n\\n    bytes32 public MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    constructor() ERC20(\\\"MetaShort\\\", \\\"MSHRT\\\"){\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x31d6ec3e5c18b7d6f4f84927f19384292dc6cec156c296f82ec46b1e2e1c325e\",\"license\":\"unlicense\"},\"contracts/MetaShortGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: unlicense\\n\\npragma solidity ^0.8.1;\\n\\nimport \\\"./MetaShort.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract MetaShortGovernance is AccessControl {\\n    struct Advertisement {\\n        uint256 desiredReactions;\\n        uint256 desiredComments;\\n        uint256 thresholdReactions;\\n        uint256 thresholdComments;\\n        uint256 tips;\\n        uint256 totalCalculatedPrice;\\n        uint256 until;\\n        uint256 status;\\n        uint256 actualReactions;\\n        uint256 actualComments;\\n        address advertiser;\\n    }\\n\\n    event AdvertisementPublished(\\n        uint256 id,\\n        uint256 desiredReactions,\\n        uint256 desiredComments,\\n        uint256 thresholdReactions,\\n        uint256 thresholdComments,\\n        uint256 until,\\n        uint256 tips,\\n        uint256 totalCalculatedPrice,\\n        address advertiser\\n    );\\n\\n    mapping(address => uint256) bloggersCurrentAdvertisement;\\n    bytes32 ADVERTISER_ROLE = keccak256(\\\"ADVERTISER_ROLE\\\");\\n    bytes32 BLOGGER_ROLE = keccak256(\\\"BLOGGER_ROLE\\\");\\n    MetaShort public token;\\n    uint256 TOKENS_PER_REACTION = 10;\\n    uint256 TOKENS_PER_COMMENT = 50;\\n    uint256 STATUS_ADVERTISEMENT_INACTIVE = 0;\\n    uint256 STATUS_ADVERTISEMENT_ACTIVE = 1;\\n    uint256 STATUS_ADVERTISEMENT_TAKEN = 2;\\n    Advertisement[] advertisements;\\n\\n    constructor(address metaShort) {\\n        token = MetaShort(metaShort);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        advertisements.push(Advertisement(0,0,0,0,0,0,0,0,0,0,address(0)));\\n    }\\n\\n    function registerAdvertiser(address advertiser) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Should be admin\\\");\\n        _grantRole(ADVERTISER_ROLE, advertiser);\\n    }\\n\\n    function registerBlogger(address blogger) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Should be admin\\\");\\n        _grantRole(BLOGGER_ROLE, blogger);\\n    }\\n\\n    function publishAdvertisement(\\n        uint256 desiredReactions,\\n        uint256 desiredComments,\\n        uint256 thresholdReactions,\\n        uint256 thresholdComments,\\n        uint256 until,\\n        uint256 tips\\n    ) public {\\n        require(hasRole(ADVERTISER_ROLE, msg.sender), \\\"You should be advertiser\\\");\\n        uint256 calculatedPrice = desiredComments * TOKENS_PER_COMMENT +\\n            desiredReactions * TOKENS_PER_REACTION;\\n        uint256 totalCalculatedPrice = tips + calculatedPrice;\\n        Advertisement memory result = Advertisement(\\n            desiredReactions,\\n            desiredComments,\\n            thresholdReactions,\\n            thresholdComments,\\n            tips,\\n            until,\\n            totalCalculatedPrice,\\n            STATUS_ADVERTISEMENT_ACTIVE,\\n            0,\\n            0,\\n            msg.sender);\\n        token.transferFrom(msg.sender, address(this), totalCalculatedPrice);\\n        advertisements.push(result);\\n        emit AdvertisementPublished(advertisements.length - 1,  desiredReactions,\\n            desiredComments,\\n            thresholdReactions,\\n            thresholdComments,\\n            until,\\n            tips,\\n            totalCalculatedPrice,\\n            msg.sender\\n        );\\n    }\\n\\n    function submitAdvertisement(uint256 advertisementId) public {\\n        require(hasRole(BLOGGER_ROLE, msg.sender), \\\"you should be blogger\\\");\\n        require(advertisements[advertisementId].status == STATUS_ADVERTISEMENT_ACTIVE, \\\"advertisement should be active\\\");\\n        uint256 activitiesCost = advertisements[advertisementId].totalCalculatedPrice - advertisements[advertisementId].tips;\\n        token.transferFrom(msg.sender, address(this), activitiesCost);\\n        bloggersCurrentAdvertisement[msg.sender] = advertisementId;\\n        advertisements[advertisementId].status = STATUS_ADVERTISEMENT_TAKEN;\\n    }\\n\\n    function requireRewardForAdvertisement(uint256 advertisementId) public {\\n        require(hasRole(BLOGGER_ROLE, msg.sender), \\\"you should be blogger\\\");\\n        require(advertisements[advertisementId].status == STATUS_ADVERTISEMENT_TAKEN, \\\"advertisement should be taken\\\");\\n        require(bloggersCurrentAdvertisement[msg.sender] == advertisementId, \\\"advertisement should be yours\\\");\\n        require(block.timestamp > advertisements[advertisementId].until, \\\"adverisement should finish\\\");\\n        Advertisement memory advertisement = advertisements[advertisementId];\\n        if (\\n            (advertisement.actualComments < advertisement.thresholdComments) ||\\n            (advertisement.actualReactions < advertisement.thresholdReactions)\\n            ) {\\n                // TODO: think out what to do with tips\\n            token.transfer(advertisement.advertiser, advertisement.totalCalculatedPrice);\\n        }\\n        else {\\n            uint256 activitiesCost = advertisement.totalCalculatedPrice - advertisement.tips;\\n            token.burn(activitiesCost);\\n            token.transfer(msg.sender, advertisement.totalCalculatedPrice);\\n        }\\n        bloggersCurrentAdvertisement[msg.sender] = 0;\\n    }\\n\\n    function sendActivity(uint256 advertisementId, uint256 reactions, uint256 comments) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"should be admin\\\");\\n        require(advertisements[advertisementId].status == STATUS_ADVERTISEMENT_TAKEN, \\\"should be taken adv\\\");\\n        advertisements[advertisementId].actualComments += comments;\\n        advertisements[advertisementId].actualReactions += reactions;\\n    }\\n}\\n\",\"keccak256\":\"0xb267de4dae50fb092802c951a7c12c630c57854655201d9bdb70d253f079c685\",\"license\":\"unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040527fae8a96feb7fa1c6eb9c1e5eab8f95f300b7a12b0ec1cf03c4c1752196e6e7b616002557f26e71ca4ebbe2ad7a241ad6ee71933b9dc517e7e17183658d1481a0e529332b9600355600a60055560326006556000600755600160085560026009553480156200007257600080fd5b506040516200295a3803806200295a8339818101604052810190620000989190620003b7565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ee6000801b336200023d60201b60201c565b600a60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090806001815401808255809150506001900390600052602060002090600b0201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000431565b6200024f82826200032e60201b60201c565b6200032a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002cf6200039860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600081519050620003b18162000417565b92915050565b600060208284031215620003ca57600080fd5b6000620003da84828501620003a0565b91505092915050565b6000620003f082620003f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200042281620003e3565b81146200042e57600080fd5b50565b61251980620004416000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391d148541161008c578063d547741f11610066578063d547741f14610245578063e3569f3f14610261578063ea17e4eb1461027d578063fc0c546a14610299576100ea565b806391d14854146101db578063a217fddf1461020b578063d1cdf78614610229576100ea565b80632f2ff15d116100c85780632f2ff15d1461016b57806336568abe1461018757806346b760e1146101a35780634e3bc211146101bf576100ea565b806301ffc9a7146100ef578063248a9ca31461011f5780632ec65a481461014f575b600080fd5b61010960048036038101906101049190611930565b6102b7565b6040516101169190611d70565b60405180910390f35b610139600480360381019061013491906118cb565b610331565b6040516101469190611d8b565b60405180910390f35b61016960048036038101906101649190611879565b610350565b005b610185600480360381019061018091906118f4565b6103ab565b005b6101a1600480360381019061019c91906118f4565b6103cc565b005b6101bd60048036038101906101b89190611959565b61044f565b005b6101d960048036038101906101d49190611879565b61071b565b005b6101f560048036038101906101f091906118f4565b610776565b6040516102029190611d70565b60405180910390f35b6102136107e0565b6040516102209190611d8b565b60405180910390f35b610243600480360381019061023e91906119d1565b6107e7565b005b61025f600480360381019061025a91906118f4565b610ac7565b005b61027b60048036038101906102769190611982565b610ae8565b005b61029760048036038101906102929190611959565b610c8c565b005b6102a161120c565b6040516102ae9190611da6565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061032a575061032982611232565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b61035d6000801b33610776565b61039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390611e83565b60405180910390fd5b6103a86003548261129c565b50565b6103b482610331565b6103bd8161137c565b6103c7838361129c565b505050565b6103d4611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890611f23565b60405180910390fd5b61044b8282611398565b5050565b61045b60035433610776565b61049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190611e23565b60405180910390fd5b600854600a82815481106104d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611f03565b60405180910390fd5b6000600a8281548110610565577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160040154600a83815481106105b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600501546105cd91906120c2565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161062e93929190611d10565b602060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068091906118a2565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600954600a8381548110610702577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600701819055505050565b6107286000801b33610776565b610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90611e83565b60405180910390fd5b6107736002548261129c565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107f360025433610776565b610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611ec3565b60405180910390fd5b6000600554876108429190612068565b600654876108509190612068565b61085a9190612012565b90506000818361086a9190612012565b905060006040518061016001604052808a8152602001898152602001888152602001878152602001858152602001868152602001838152602001600854815260200160008152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff168152509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161093593929190611d10565b602060405180830381600087803b15801561094f57600080fd5b505af1158015610963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098791906118a2565b50600a8190806001815401808255809150506001900390600052602060002090600b0201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507f075601f141bb5ec781af018758df1fc9201e940014004e64c230f54a77f686ba6001600a80549050610a9791906120c2565b8a8a8a8a8a8a8933604051610ab499989796959493929190611f5e565b60405180910390a1505050505050505050565b610ad082610331565b610ad98161137c565b610ae38383611398565b505050565b610af56000801b33610776565b610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90611de3565b60405180910390fd5b600954600a8481548110610b71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90611ea3565b60405180910390fd5b80600a8481548110610bfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016009016000828254610c1e9190612012565b9250508190555081600a8481548110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016008016000828254610c809190612012565b92505081905550505050565b610c9860035433610776565b610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90611e23565b60405180910390fd5b600954600a8281548110610d14577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90611ee3565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde90611e43565b60405180910390fd5b600a8181548110610e21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600601544211610e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6b90611e63565b60405180910390fd5b6000600a8281548110610eb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080606001518161012001511080610fa557508060400151816101000151105b1561106857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8261014001518360a001516040518363ffffffff1660e01b8152600401611010929190611d47565b602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906118a2565b506111c3565b600081608001518260a0015161107e91906120c2565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b81526004016110db9190611f43565b600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338460a001516040518363ffffffff1660e01b815260040161116e929190611d47565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906118a2565b50505b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6112a68282610776565b61137857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061131d611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61138d81611388611390565b611479565b50565b600033905090565b6113a28282610776565b1561147557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061141a611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6114838282610776565b611512576114a88173ffffffffffffffffffffffffffffffffffffffff166014611516565b6114b68360001c6020611516565b6040516020016114c7929190611cd6565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115099190611dc1565b60405180910390fd5b5050565b6060600060028360026115299190612068565b6115339190612012565b67ffffffffffffffff811115611572577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a45781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611602577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061168c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116cc9190612068565b6116d69190612012565b90505b60018111156117c2577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061177b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117bb906121cb565b90506116d9565b5060008414611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd90611e03565b60405180910390fd5b8091505092915050565b60008135905061181f81612470565b92915050565b60008151905061183481612487565b92915050565b6000813590506118498161249e565b92915050565b60008135905061185e816124b5565b92915050565b600081359050611873816124cc565b92915050565b60006020828403121561188b57600080fd5b600061189984828501611810565b91505092915050565b6000602082840312156118b457600080fd5b60006118c284828501611825565b91505092915050565b6000602082840312156118dd57600080fd5b60006118eb8482850161183a565b91505092915050565b6000806040838503121561190757600080fd5b60006119158582860161183a565b925050602061192685828601611810565b9150509250929050565b60006020828403121561194257600080fd5b60006119508482850161184f565b91505092915050565b60006020828403121561196b57600080fd5b600061197984828501611864565b91505092915050565b60008060006060848603121561199757600080fd5b60006119a586828701611864565b93505060206119b686828701611864565b92505060406119c786828701611864565b9150509250925092565b60008060008060008060c087890312156119ea57600080fd5b60006119f889828a01611864565b9650506020611a0989828a01611864565b9550506040611a1a89828a01611864565b9450506060611a2b89828a01611864565b9350506080611a3c89828a01611864565b92505060a0611a4d89828a01611864565b9150509295509295509295565b611a63816120f6565b82525050565b611a7281612108565b82525050565b611a8181612114565b82525050565b611a9081612174565b82525050565b6000611aa182611feb565b611aab8185611ff6565b9350611abb818560208601612198565b611ac481612224565b840191505092915050565b6000611ada82611feb565b611ae48185612007565b9350611af4818560208601612198565b80840191505092915050565b6000611b0d600f83611ff6565b9150611b1882612235565b602082019050919050565b6000611b30602083611ff6565b9150611b3b8261225e565b602082019050919050565b6000611b53601583611ff6565b9150611b5e82612287565b602082019050919050565b6000611b76601d83611ff6565b9150611b81826122b0565b602082019050919050565b6000611b99601a83611ff6565b9150611ba4826122d9565b602082019050919050565b6000611bbc600f83611ff6565b9150611bc782612302565b602082019050919050565b6000611bdf601783612007565b9150611bea8261232b565b601782019050919050565b6000611c02601383611ff6565b9150611c0d82612354565b602082019050919050565b6000611c25601883611ff6565b9150611c308261237d565b602082019050919050565b6000611c48601d83611ff6565b9150611c53826123a6565b602082019050919050565b6000611c6b601e83611ff6565b9150611c76826123cf565b602082019050919050565b6000611c8e601183612007565b9150611c99826123f8565b601182019050919050565b6000611cb1602f83611ff6565b9150611cbc82612421565b604082019050919050565b611cd08161216a565b82525050565b6000611ce182611bd2565b9150611ced8285611acf565b9150611cf882611c81565b9150611d048284611acf565b91508190509392505050565b6000606082019050611d256000830186611a5a565b611d326020830185611a5a565b611d3f6040830184611cc7565b949350505050565b6000604082019050611d5c6000830185611a5a565b611d696020830184611cc7565b9392505050565b6000602082019050611d856000830184611a69565b92915050565b6000602082019050611da06000830184611a78565b92915050565b6000602082019050611dbb6000830184611a87565b92915050565b60006020820190508181036000830152611ddb8184611a96565b905092915050565b60006020820190508181036000830152611dfc81611b00565b9050919050565b60006020820190508181036000830152611e1c81611b23565b9050919050565b60006020820190508181036000830152611e3c81611b46565b9050919050565b60006020820190508181036000830152611e5c81611b69565b9050919050565b60006020820190508181036000830152611e7c81611b8c565b9050919050565b60006020820190508181036000830152611e9c81611baf565b9050919050565b60006020820190508181036000830152611ebc81611bf5565b9050919050565b60006020820190508181036000830152611edc81611c18565b9050919050565b60006020820190508181036000830152611efc81611c3b565b9050919050565b60006020820190508181036000830152611f1c81611c5e565b9050919050565b60006020820190508181036000830152611f3c81611ca4565b9050919050565b6000602082019050611f586000830184611cc7565b92915050565b600061012082019050611f74600083018c611cc7565b611f81602083018b611cc7565b611f8e604083018a611cc7565b611f9b6060830189611cc7565b611fa86080830188611cc7565b611fb560a0830187611cc7565b611fc260c0830186611cc7565b611fcf60e0830185611cc7565b611fdd610100830184611a5a565b9a9950505050505050505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061201d8261216a565b91506120288361216a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561205d5761205c6121f5565b5b828201905092915050565b60006120738261216a565b915061207e8361216a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120b7576120b66121f5565b5b828202905092915050565b60006120cd8261216a565b91506120d88361216a565b9250828210156120eb576120ea6121f5565b5b828203905092915050565b60006121018261214a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061217f82612186565b9050919050565b60006121918261214a565b9050919050565b60005b838110156121b657808201518184015260208101905061219b565b838111156121c5576000848401525b50505050565b60006121d68261216a565b915060008214156121ea576121e96121f5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f73686f756c642062652061646d696e0000000000000000000000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f796f752073686f756c6420626520626c6f676765720000000000000000000000600082015250565b7f6164766572746973656d656e742073686f756c6420626520796f757273000000600082015250565b7f61647665726973656d656e742073686f756c642066696e697368000000000000600082015250565b7f53686f756c642062652061646d696e0000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f73686f756c642062652074616b656e2061647600000000000000000000000000600082015250565b7f596f752073686f756c6420626520616476657274697365720000000000000000600082015250565b7f6164766572746973656d656e742073686f756c642062652074616b656e000000600082015250565b7f6164766572746973656d656e742073686f756c64206265206163746976650000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612479816120f6565b811461248457600080fd5b50565b61249081612108565b811461249b57600080fd5b50565b6124a781612114565b81146124b257600080fd5b50565b6124be8161211e565b81146124c957600080fd5b50565b6124d58161216a565b81146124e057600080fd5b5056fea264697066735822122087dc50430295f042856613c8ed4928426990b3fbfc4251e101edd87073fce78664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391d148541161008c578063d547741f11610066578063d547741f14610245578063e3569f3f14610261578063ea17e4eb1461027d578063fc0c546a14610299576100ea565b806391d14854146101db578063a217fddf1461020b578063d1cdf78614610229576100ea565b80632f2ff15d116100c85780632f2ff15d1461016b57806336568abe1461018757806346b760e1146101a35780634e3bc211146101bf576100ea565b806301ffc9a7146100ef578063248a9ca31461011f5780632ec65a481461014f575b600080fd5b61010960048036038101906101049190611930565b6102b7565b6040516101169190611d70565b60405180910390f35b610139600480360381019061013491906118cb565b610331565b6040516101469190611d8b565b60405180910390f35b61016960048036038101906101649190611879565b610350565b005b610185600480360381019061018091906118f4565b6103ab565b005b6101a1600480360381019061019c91906118f4565b6103cc565b005b6101bd60048036038101906101b89190611959565b61044f565b005b6101d960048036038101906101d49190611879565b61071b565b005b6101f560048036038101906101f091906118f4565b610776565b6040516102029190611d70565b60405180910390f35b6102136107e0565b6040516102209190611d8b565b60405180910390f35b610243600480360381019061023e91906119d1565b6107e7565b005b61025f600480360381019061025a91906118f4565b610ac7565b005b61027b60048036038101906102769190611982565b610ae8565b005b61029760048036038101906102929190611959565b610c8c565b005b6102a161120c565b6040516102ae9190611da6565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061032a575061032982611232565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b61035d6000801b33610776565b61039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390611e83565b60405180910390fd5b6103a86003548261129c565b50565b6103b482610331565b6103bd8161137c565b6103c7838361129c565b505050565b6103d4611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890611f23565b60405180910390fd5b61044b8282611398565b5050565b61045b60035433610776565b61049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190611e23565b60405180910390fd5b600854600a82815481106104d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611f03565b60405180910390fd5b6000600a8281548110610565577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160040154600a83815481106105b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600501546105cd91906120c2565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161062e93929190611d10565b602060405180830381600087803b15801561064857600080fd5b505af115801561065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068091906118a2565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600954600a8381548110610702577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600701819055505050565b6107286000801b33610776565b610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90611e83565b60405180910390fd5b6107736002548261129c565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107f360025433610776565b610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990611ec3565b60405180910390fd5b6000600554876108429190612068565b600654876108509190612068565b61085a9190612012565b90506000818361086a9190612012565b905060006040518061016001604052808a8152602001898152602001888152602001878152602001858152602001868152602001838152602001600854815260200160008152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff168152509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161093593929190611d10565b602060405180830381600087803b15801561094f57600080fd5b505af1158015610963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098791906118a2565b50600a8190806001815401808255809150506001900390600052602060002090600b0201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507f075601f141bb5ec781af018758df1fc9201e940014004e64c230f54a77f686ba6001600a80549050610a9791906120c2565b8a8a8a8a8a8a8933604051610ab499989796959493929190611f5e565b60405180910390a1505050505050505050565b610ad082610331565b610ad98161137c565b610ae38383611398565b505050565b610af56000801b33610776565b610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90611de3565b60405180910390fd5b600954600a8481548110610b71577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90611ea3565b60405180910390fd5b80600a8481548110610bfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016009016000828254610c1e9190612012565b9250508190555081600a8481548110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016008016000828254610c809190612012565b92505081905550505050565b610c9860035433610776565b610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90611e23565b60405180910390fd5b600954600a8281548110610d14577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016007015414610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90611ee3565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde90611e43565b60405180910390fd5b600a8181548110610e21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600601544211610e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6b90611e63565b60405180910390fd5b6000600a8281548110610eb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080606001518161012001511080610fa557508060400151816101000151105b1561106857600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8261014001518360a001516040518363ffffffff1660e01b8152600401611010929190611d47565b602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906118a2565b506111c3565b600081608001518260a0015161107e91906120c2565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b81526004016110db9190611f43565b600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338460a001516040518363ffffffff1660e01b815260040161116e929190611d47565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c091906118a2565b50505b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6112a68282610776565b61137857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061131d611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61138d81611388611390565b611479565b50565b600033905090565b6113a28282610776565b1561147557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061141a611390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6114838282610776565b611512576114a88173ffffffffffffffffffffffffffffffffffffffff166014611516565b6114b68360001c6020611516565b6040516020016114c7929190611cd6565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115099190611dc1565b60405180910390fd5b5050565b6060600060028360026115299190612068565b6115339190612012565b67ffffffffffffffff811115611572577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115a45781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611602577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061168c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026116cc9190612068565b6116d69190612012565b90505b60018111156117c2577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061173e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061177b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806117bb906121cb565b90506116d9565b5060008414611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd90611e03565b60405180910390fd5b8091505092915050565b60008135905061181f81612470565b92915050565b60008151905061183481612487565b92915050565b6000813590506118498161249e565b92915050565b60008135905061185e816124b5565b92915050565b600081359050611873816124cc565b92915050565b60006020828403121561188b57600080fd5b600061189984828501611810565b91505092915050565b6000602082840312156118b457600080fd5b60006118c284828501611825565b91505092915050565b6000602082840312156118dd57600080fd5b60006118eb8482850161183a565b91505092915050565b6000806040838503121561190757600080fd5b60006119158582860161183a565b925050602061192685828601611810565b9150509250929050565b60006020828403121561194257600080fd5b60006119508482850161184f565b91505092915050565b60006020828403121561196b57600080fd5b600061197984828501611864565b91505092915050565b60008060006060848603121561199757600080fd5b60006119a586828701611864565b93505060206119b686828701611864565b92505060406119c786828701611864565b9150509250925092565b60008060008060008060c087890312156119ea57600080fd5b60006119f889828a01611864565b9650506020611a0989828a01611864565b9550506040611a1a89828a01611864565b9450506060611a2b89828a01611864565b9350506080611a3c89828a01611864565b92505060a0611a4d89828a01611864565b9150509295509295509295565b611a63816120f6565b82525050565b611a7281612108565b82525050565b611a8181612114565b82525050565b611a9081612174565b82525050565b6000611aa182611feb565b611aab8185611ff6565b9350611abb818560208601612198565b611ac481612224565b840191505092915050565b6000611ada82611feb565b611ae48185612007565b9350611af4818560208601612198565b80840191505092915050565b6000611b0d600f83611ff6565b9150611b1882612235565b602082019050919050565b6000611b30602083611ff6565b9150611b3b8261225e565b602082019050919050565b6000611b53601583611ff6565b9150611b5e82612287565b602082019050919050565b6000611b76601d83611ff6565b9150611b81826122b0565b602082019050919050565b6000611b99601a83611ff6565b9150611ba4826122d9565b602082019050919050565b6000611bbc600f83611ff6565b9150611bc782612302565b602082019050919050565b6000611bdf601783612007565b9150611bea8261232b565b601782019050919050565b6000611c02601383611ff6565b9150611c0d82612354565b602082019050919050565b6000611c25601883611ff6565b9150611c308261237d565b602082019050919050565b6000611c48601d83611ff6565b9150611c53826123a6565b602082019050919050565b6000611c6b601e83611ff6565b9150611c76826123cf565b602082019050919050565b6000611c8e601183612007565b9150611c99826123f8565b601182019050919050565b6000611cb1602f83611ff6565b9150611cbc82612421565b604082019050919050565b611cd08161216a565b82525050565b6000611ce182611bd2565b9150611ced8285611acf565b9150611cf882611c81565b9150611d048284611acf565b91508190509392505050565b6000606082019050611d256000830186611a5a565b611d326020830185611a5a565b611d3f6040830184611cc7565b949350505050565b6000604082019050611d5c6000830185611a5a565b611d696020830184611cc7565b9392505050565b6000602082019050611d856000830184611a69565b92915050565b6000602082019050611da06000830184611a78565b92915050565b6000602082019050611dbb6000830184611a87565b92915050565b60006020820190508181036000830152611ddb8184611a96565b905092915050565b60006020820190508181036000830152611dfc81611b00565b9050919050565b60006020820190508181036000830152611e1c81611b23565b9050919050565b60006020820190508181036000830152611e3c81611b46565b9050919050565b60006020820190508181036000830152611e5c81611b69565b9050919050565b60006020820190508181036000830152611e7c81611b8c565b9050919050565b60006020820190508181036000830152611e9c81611baf565b9050919050565b60006020820190508181036000830152611ebc81611bf5565b9050919050565b60006020820190508181036000830152611edc81611c18565b9050919050565b60006020820190508181036000830152611efc81611c3b565b9050919050565b60006020820190508181036000830152611f1c81611c5e565b9050919050565b60006020820190508181036000830152611f3c81611ca4565b9050919050565b6000602082019050611f586000830184611cc7565b92915050565b600061012082019050611f74600083018c611cc7565b611f81602083018b611cc7565b611f8e604083018a611cc7565b611f9b6060830189611cc7565b611fa86080830188611cc7565b611fb560a0830187611cc7565b611fc260c0830186611cc7565b611fcf60e0830185611cc7565b611fdd610100830184611a5a565b9a9950505050505050505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061201d8261216a565b91506120288361216a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561205d5761205c6121f5565b5b828201905092915050565b60006120738261216a565b915061207e8361216a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120b7576120b66121f5565b5b828202905092915050565b60006120cd8261216a565b91506120d88361216a565b9250828210156120eb576120ea6121f5565b5b828203905092915050565b60006121018261214a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061217f82612186565b9050919050565b60006121918261214a565b9050919050565b60005b838110156121b657808201518184015260208101905061219b565b838111156121c5576000848401525b50505050565b60006121d68261216a565b915060008214156121ea576121e96121f5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f73686f756c642062652061646d696e0000000000000000000000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f796f752073686f756c6420626520626c6f676765720000000000000000000000600082015250565b7f6164766572746973656d656e742073686f756c6420626520796f757273000000600082015250565b7f61647665726973656d656e742073686f756c642066696e697368000000000000600082015250565b7f53686f756c642062652061646d696e0000000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f73686f756c642062652074616b656e2061647600000000000000000000000000600082015250565b7f596f752073686f756c6420626520616476657274697365720000000000000000600082015250565b7f6164766572746973656d656e742073686f756c642062652074616b656e000000600082015250565b7f6164766572746973656d656e742073686f756c64206265206163746976650000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612479816120f6565b811461248457600080fd5b50565b61249081612108565b811461249b57600080fd5b50565b6124a781612114565b81146124b257600080fd5b50565b6124be8161211e565b81146124c957600080fd5b50565b6124d58161216a565b81146124e057600080fd5b5056fea264697066735822122087dc50430295f042856613c8ed4928426990b3fbfc4251e101edd87073fce78664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1549,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "bloggersCurrentAdvertisement",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1554,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "ADVERTISER_ROLE",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1559,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "BLOGGER_ROLE",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1562,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "token",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MetaShort)1496"
      },
      {
        "astId": 1565,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "TOKENS_PER_REACTION",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1568,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "TOKENS_PER_COMMENT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1571,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "STATUS_ADVERTISEMENT_INACTIVE",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1574,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "STATUS_ADVERTISEMENT_ACTIVE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1577,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "STATUS_ADVERTISEMENT_TAKEN",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1581,
        "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
        "label": "advertisements",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Advertisement)1525_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Advertisement)1525_storage)dyn_storage": {
        "base": "t_struct(Advertisement)1525_storage",
        "encoding": "dynamic_array",
        "label": "struct MetaShortGovernance.Advertisement[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MetaShort)1496": {
        "encoding": "inplace",
        "label": "contract MetaShort",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(Advertisement)1525_storage": {
        "encoding": "inplace",
        "label": "struct MetaShortGovernance.Advertisement",
        "members": [
          {
            "astId": 1504,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "desiredReactions",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1506,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "desiredComments",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1508,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "thresholdReactions",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1510,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "thresholdComments",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1512,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "tips",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1514,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "totalCalculatedPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1516,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "until",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1518,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1520,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "actualReactions",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1522,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "actualComments",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1524,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "advertiser",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MetaShortGovernance.sol:MetaShortGovernance",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}